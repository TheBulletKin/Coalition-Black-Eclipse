//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input System/BaseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseControls"",
    ""maps"": [
        {
            ""name"": ""FPS"",
            ""id"": ""1a54d1de-c15c-4ed9-991b-a8c81fce9f51"",
            ""actions"": [
                {
                    ""name"": ""MouseAim"",
                    ""type"": ""Value"",
                    ""id"": ""43ea719e-1aae-4bad-962a-1d023fa14e65"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2d341490-146b-4df9-a344-fa7b58dfb2cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""502e439f-32c3-40eb-8b61-8fc37f1ed1b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6094d323-6601-4779-993e-acbaac89712a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""c5092640-ae06-45e2-a935-42386757cba4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f92e637f-3419-4869-99d6-29a2febbc2d9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExecuteCommand"",
                    ""type"": ""Button"",
                    ""id"": ""0eece59a-5c7b-4d32-a3e1-8c1767e543e3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCommand"",
                    ""type"": ""Button"",
                    ""id"": ""5935e949-e92a-46f7-8477-e348e853457f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter Map View"",
                    ""type"": ""Button"",
                    ""id"": ""e8e5ecc9-3dfa-4e82-8b25-fc4628201215"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QueueCommand"",
                    ""type"": ""Button"",
                    ""id"": ""27517a4e-fb80-42d5-bbc3-60be96a8f765"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a34adc38-ee59-4432-8a53-2c88c5cd1e3c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseAim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2311d57e-d30d-4680-8053-83b572ebc0d6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b20df2a-3ebb-4f18-b124-192e7b059fee"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa547c87-ce79-4001-8e50-6c9fe5c7ad34"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9c191c05-42fd-475c-bd7d-9cc8039b5877"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""48ba05b8-d3ee-423a-83e7-f3b0ddf15c49"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""749be40c-2162-4f36-9550-438125b21c79"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acdb7e5d-44a2-4512-aa64-b9f723bec898"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31489799-60b7-4657-a940-aaad598600d1"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ad014cf-41d6-475e-85a5-467cc3152b64"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82975b46-e45d-453e-94b8-6c8c304173f4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExecuteCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cdaca25-05dd-46ea-8cac-b7b1a3cc6512"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""461ff661-10f5-4450-9365-7a58d09add7d"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter Map View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""13001819-6bd3-4814-860e-ff63c36aeb77"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QueueCommand"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""235103c3-ec62-45c9-8a92-d2b1d371feb8"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QueueCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""630bf634-bab7-45de-bfbc-a1c92dceebb2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QueueCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MapView"",
            ""id"": ""e44b057d-1423-4714-b6e2-59ad010a238c"",
            ""actions"": [
                {
                    ""name"": ""MapMove"",
                    ""type"": ""Value"",
                    ""id"": ""3e993dc4-7e8d-4302-9e48-00b34b0ebc66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit Map"",
                    ""type"": ""Button"",
                    ""id"": ""d7420f82-f022-49ba-88f9-2c238ab6e90b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExecuteCommand"",
                    ""type"": ""Button"",
                    ""id"": ""76fb33d3-7fa2-4332-ad57-9510b0a85f4c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CreateCommand"",
                    ""type"": ""Button"",
                    ""id"": ""a2a0febf-61bc-4748-832f-1675d424c5b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""6de1c244-4066-4911-95c5-928f20b60700"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""900d6919-a1f5-478a-a4e8-7aa66e67fc07"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f6f9572-3f78-4850-b3f2-566fec7466f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49526737-fba9-430e-9e7b-6860d8a03232"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""69be0d55-c758-4ed8-8989-b89d0a741aa6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c89dfede-ad25-43c4-b8c8-2df783249ac0"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a2e36fe-f453-44fd-bd60-1ade4caf6ae4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExecuteCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c7a94f2-b09c-4ca9-b91f-4525f8c29093"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateCommand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPS
        m_FPS = asset.FindActionMap("FPS", throwIfNotFound: true);
        m_FPS_MouseAim = m_FPS.FindAction("MouseAim", throwIfNotFound: true);
        m_FPS_Move = m_FPS.FindAction("Move", throwIfNotFound: true);
        m_FPS_Sprint = m_FPS.FindAction("Sprint", throwIfNotFound: true);
        m_FPS_Jump = m_FPS.FindAction("Jump", throwIfNotFound: true);
        m_FPS_Crouch = m_FPS.FindAction("Crouch", throwIfNotFound: true);
        m_FPS_Interact = m_FPS.FindAction("Interact", throwIfNotFound: true);
        m_FPS_ExecuteCommand = m_FPS.FindAction("ExecuteCommand", throwIfNotFound: true);
        m_FPS_MoveCommand = m_FPS.FindAction("MoveCommand", throwIfNotFound: true);
        m_FPS_EnterMapView = m_FPS.FindAction("Enter Map View", throwIfNotFound: true);
        m_FPS_QueueCommand = m_FPS.FindAction("QueueCommand", throwIfNotFound: true);
        // MapView
        m_MapView = asset.FindActionMap("MapView", throwIfNotFound: true);
        m_MapView_MapMove = m_MapView.FindAction("MapMove", throwIfNotFound: true);
        m_MapView_ExitMap = m_MapView.FindAction("Exit Map", throwIfNotFound: true);
        m_MapView_ExecuteCommand = m_MapView.FindAction("ExecuteCommand", throwIfNotFound: true);
        m_MapView_CreateCommand = m_MapView.FindAction("CreateCommand", throwIfNotFound: true);
    }

    ~@BaseControls()
    {
        UnityEngine.Debug.Assert(!m_FPS.enabled, "This will cause a leak and performance issues, BaseControls.FPS.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MapView.enabled, "This will cause a leak and performance issues, BaseControls.MapView.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPS
    private readonly InputActionMap m_FPS;
    private List<IFPSActions> m_FPSActionsCallbackInterfaces = new List<IFPSActions>();
    private readonly InputAction m_FPS_MouseAim;
    private readonly InputAction m_FPS_Move;
    private readonly InputAction m_FPS_Sprint;
    private readonly InputAction m_FPS_Jump;
    private readonly InputAction m_FPS_Crouch;
    private readonly InputAction m_FPS_Interact;
    private readonly InputAction m_FPS_ExecuteCommand;
    private readonly InputAction m_FPS_MoveCommand;
    private readonly InputAction m_FPS_EnterMapView;
    private readonly InputAction m_FPS_QueueCommand;
    public struct FPSActions
    {
        private @BaseControls m_Wrapper;
        public FPSActions(@BaseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseAim => m_Wrapper.m_FPS_MouseAim;
        public InputAction @Move => m_Wrapper.m_FPS_Move;
        public InputAction @Sprint => m_Wrapper.m_FPS_Sprint;
        public InputAction @Jump => m_Wrapper.m_FPS_Jump;
        public InputAction @Crouch => m_Wrapper.m_FPS_Crouch;
        public InputAction @Interact => m_Wrapper.m_FPS_Interact;
        public InputAction @ExecuteCommand => m_Wrapper.m_FPS_ExecuteCommand;
        public InputAction @MoveCommand => m_Wrapper.m_FPS_MoveCommand;
        public InputAction @EnterMapView => m_Wrapper.m_FPS_EnterMapView;
        public InputAction @QueueCommand => m_Wrapper.m_FPS_QueueCommand;
        public InputActionMap Get() { return m_Wrapper.m_FPS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSActions set) { return set.Get(); }
        public void AddCallbacks(IFPSActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSActionsCallbackInterfaces.Add(instance);
            @MouseAim.started += instance.OnMouseAim;
            @MouseAim.performed += instance.OnMouseAim;
            @MouseAim.canceled += instance.OnMouseAim;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ExecuteCommand.started += instance.OnExecuteCommand;
            @ExecuteCommand.performed += instance.OnExecuteCommand;
            @ExecuteCommand.canceled += instance.OnExecuteCommand;
            @MoveCommand.started += instance.OnMoveCommand;
            @MoveCommand.performed += instance.OnMoveCommand;
            @MoveCommand.canceled += instance.OnMoveCommand;
            @EnterMapView.started += instance.OnEnterMapView;
            @EnterMapView.performed += instance.OnEnterMapView;
            @EnterMapView.canceled += instance.OnEnterMapView;
            @QueueCommand.started += instance.OnQueueCommand;
            @QueueCommand.performed += instance.OnQueueCommand;
            @QueueCommand.canceled += instance.OnQueueCommand;
        }

        private void UnregisterCallbacks(IFPSActions instance)
        {
            @MouseAim.started -= instance.OnMouseAim;
            @MouseAim.performed -= instance.OnMouseAim;
            @MouseAim.canceled -= instance.OnMouseAim;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ExecuteCommand.started -= instance.OnExecuteCommand;
            @ExecuteCommand.performed -= instance.OnExecuteCommand;
            @ExecuteCommand.canceled -= instance.OnExecuteCommand;
            @MoveCommand.started -= instance.OnMoveCommand;
            @MoveCommand.performed -= instance.OnMoveCommand;
            @MoveCommand.canceled -= instance.OnMoveCommand;
            @EnterMapView.started -= instance.OnEnterMapView;
            @EnterMapView.performed -= instance.OnEnterMapView;
            @EnterMapView.canceled -= instance.OnEnterMapView;
            @QueueCommand.started -= instance.OnQueueCommand;
            @QueueCommand.performed -= instance.OnQueueCommand;
            @QueueCommand.canceled -= instance.OnQueueCommand;
        }

        public void RemoveCallbacks(IFPSActions instance)
        {
            if (m_Wrapper.m_FPSActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSActions @FPS => new FPSActions(this);

    // MapView
    private readonly InputActionMap m_MapView;
    private List<IMapViewActions> m_MapViewActionsCallbackInterfaces = new List<IMapViewActions>();
    private readonly InputAction m_MapView_MapMove;
    private readonly InputAction m_MapView_ExitMap;
    private readonly InputAction m_MapView_ExecuteCommand;
    private readonly InputAction m_MapView_CreateCommand;
    public struct MapViewActions
    {
        private @BaseControls m_Wrapper;
        public MapViewActions(@BaseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MapMove => m_Wrapper.m_MapView_MapMove;
        public InputAction @ExitMap => m_Wrapper.m_MapView_ExitMap;
        public InputAction @ExecuteCommand => m_Wrapper.m_MapView_ExecuteCommand;
        public InputAction @CreateCommand => m_Wrapper.m_MapView_CreateCommand;
        public InputActionMap Get() { return m_Wrapper.m_MapView; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapViewActions set) { return set.Get(); }
        public void AddCallbacks(IMapViewActions instance)
        {
            if (instance == null || m_Wrapper.m_MapViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapViewActionsCallbackInterfaces.Add(instance);
            @MapMove.started += instance.OnMapMove;
            @MapMove.performed += instance.OnMapMove;
            @MapMove.canceled += instance.OnMapMove;
            @ExitMap.started += instance.OnExitMap;
            @ExitMap.performed += instance.OnExitMap;
            @ExitMap.canceled += instance.OnExitMap;
            @ExecuteCommand.started += instance.OnExecuteCommand;
            @ExecuteCommand.performed += instance.OnExecuteCommand;
            @ExecuteCommand.canceled += instance.OnExecuteCommand;
            @CreateCommand.started += instance.OnCreateCommand;
            @CreateCommand.performed += instance.OnCreateCommand;
            @CreateCommand.canceled += instance.OnCreateCommand;
        }

        private void UnregisterCallbacks(IMapViewActions instance)
        {
            @MapMove.started -= instance.OnMapMove;
            @MapMove.performed -= instance.OnMapMove;
            @MapMove.canceled -= instance.OnMapMove;
            @ExitMap.started -= instance.OnExitMap;
            @ExitMap.performed -= instance.OnExitMap;
            @ExitMap.canceled -= instance.OnExitMap;
            @ExecuteCommand.started -= instance.OnExecuteCommand;
            @ExecuteCommand.performed -= instance.OnExecuteCommand;
            @ExecuteCommand.canceled -= instance.OnExecuteCommand;
            @CreateCommand.started -= instance.OnCreateCommand;
            @CreateCommand.performed -= instance.OnCreateCommand;
            @CreateCommand.canceled -= instance.OnCreateCommand;
        }

        public void RemoveCallbacks(IMapViewActions instance)
        {
            if (m_Wrapper.m_MapViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapViewActions instance)
        {
            foreach (var item in m_Wrapper.m_MapViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapViewActions @MapView => new MapViewActions(this);
    public interface IFPSActions
    {
        void OnMouseAim(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnExecuteCommand(InputAction.CallbackContext context);
        void OnMoveCommand(InputAction.CallbackContext context);
        void OnEnterMapView(InputAction.CallbackContext context);
        void OnQueueCommand(InputAction.CallbackContext context);
    }
    public interface IMapViewActions
    {
        void OnMapMove(InputAction.CallbackContext context);
        void OnExitMap(InputAction.CallbackContext context);
        void OnExecuteCommand(InputAction.CallbackContext context);
        void OnCreateCommand(InputAction.CallbackContext context);
    }
}
